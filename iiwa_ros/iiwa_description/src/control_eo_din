#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from functions import *
from roslib import packages

import rbdl


rospy.init_node("control_pdg")
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)
bmarker_actual  = BallMarker(color['RED'])
bmarker_deseado = BallMarker(color['GREEN'])
# Archivos donde se almacenara los datos
fqact = open("/tmp/qactual.txt", "w")
fqdes = open("/tmp/qdeseado.txt", "w")
fxact = open("/tmp/xactual.txt", "w")
fxdes = open("/tmp/xdeseado.txt", "w")

# Nombres de las articulaciones
jnames = ['iiwa_joint_1', 'iiwa_joint_2', 'iiwa_joint_3','iiwa_joint_4', 'iiwa_joint_5', 'iiwa_joint_6', 'iiwa_joint_7', 'iiwa_joint_8']

# Objeto (mensaje) de tipo JointState
jstate = JointState()
# Valores del mensaje
jstate.header.stamp = rospy.Time.now()
jstate.name = jnames

#limits
u_limit = np.array([2.82, 1.99, 2.82, 1.99, 2.82, 1.99, 2.99, 0.3])
l_limit = np.array([-2.82, -1.99, -2.82, -1.99, -2.82, -1.99, -2.99, 0])

# =============================================================
# Configuracion articular inicial (en radianes)
q = np.array([0.0, -1.0, 1.7, -2.2, -1.6, 0.0, 0, 0])
#q = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0])
# Velocidad inicial
dq = np.array([0., 0., 0., 0., 0., 0., 0, 0])
# Aceleracion inicial
ddq = np.array([0., 0., 0., 0., 0., 0.,0 ,0])
# Configuracion articular deseada
qdes = np.array([1.1 ,0.3, -1.4, 1, 1.6, 1.5, 2 ,0.15])
#qdes = np.array([1.5, 1.0, 1.0, 1.3, 1.5, 1.0, 0, 0])
# Velocidad articular deseada
dqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 0])
# Aceleracion articular deseada
ddqdes = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0,0])
# =============================================================

# =========================================================
# Posicion resultante de la configuracion articular deseada
xdes = fkine_iiwa(qdes)[0:3,3]
# 
dxdes = np.array([0, 0, 0])
# 
ddxdes = np.array([0, 0, 0])
# ========================================================

# Copiar la configuracion articular en el mensaje a ser publicado
jstate.position = q
pub.publish(jstate)

# Modelo RBDL
modelo = rbdl.loadModel('../Proyecto/src/iiwa_ros/iiwa_description/urdf/model.urdf')
ndof   = modelo.q_size     # Grados de libertad

# Arrays numpy
zeros = np.zeros(ndof)          # Vector de ceros
g     = np.zeros(ndof)          # Para la gravedad
M     = np.zeros([ndof, ndof]) 
b     = np.zeros(ndof)

# Frecuencia del envio (en Hz)
freq = 20
dt = 1.0/freq
rate = rospy.Rate(freq)

# Simulador dinamico del robot
#robot = Robot(q, dq, ndof, dt)

# Se definen las ganancias del controlador
valores = 2*np.array([1, 1, 1])#mas de uno
Kp = np.diag(valores)
Kd = 2*np.sqrt(Kp)

J_1 = np.array([[0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0],])

# Bucle de ejecucion continua
t = 0.0
cnt = 1
while not rospy.is_shutdown():

    # Leer valores del simulador
    #q  = robot.read_joint_positions()
    #dq = robot.read_joint_velocities()
    # Posicion actual del efector final
    x = fkine_iiwa(q)[0:3,3]
    # Tiempo actual (necesario como indicador para ROS)
    jstate.header.stamp = rospy.Time.now()

    # Almacenamiento de datos
    fxact.write(str(t)+' '+str(x[0])+' '+str(x[1])+' '+str(x[2])+'\n')
    fxdes.write(str(t)+' '+str(xdes[0])+' '+str(xdes[1])+' '+str(xdes[2])+'\n')
    fqact.write(str(t)+' '+str(q[0])+' '+str(q[1])+' '+ str(q[2])+' '+ str(q[3])+' '+str(q[4])+' '+str(q[5])+'\n ')
    fqdes.write(str(t)+' '+str(qdes[0])+' '+str(qdes[1])+' '+ str(qdes[2])+' '+ str(qdes[3])+' '+str(qdes[4])+' '+str(qdes[5])+'\n ')

    # ----------------------------
    # Control dinamico 
    # ----------------------------
    J = jacobian_iiwa14(q)
    dJ = (J-J_1)/dt
    dx = J.dot(dq)
    pinvJ = np.linalg.pinv(J)
    J_1 = J
    
    rbdl.CompositeRigidBodyAlgorithm(modelo, q, M)
    rbdl.NonlinearEffects(modelo, q, dq, b)
    
    u_d =ddxdes-dJ.dot(dq)+Kd.dot(dxdes-dx)+Kp.dot(xdes-x) 
    u = M.dot(pinvJ).dot(u_d) + b
    
    ddqc = np.linalg.inv(M).dot(u-b)
    qc = q + dt*dq
    dq = dq + dt*ddqc
    
    #limit control
    for i in range (ndof):
       if (qc[i] < u_limit[i] and qc[i] > l_limit[i] ):
          q[i] = qc[i]
          #dq = dqc
     
    if (np.linalg.norm(xdes-x) < 1e-3):
       print("Se llegÃ³ al punto deseado en {:.3} segundos".format(cnt*dt))
       break

    cnt = cnt +1
    # Simulacion del robot
    #robot.send_command(u)

    # Publicacion del mensaje
    jstate.position = q
    pub.publish(jstate)
    bmarker_deseado.xyz(xdes)
    bmarker_actual.xyz(x)
    t = t+dt
    # Esperar hasta la siguiente  iteracion
    rate.sleep()

fqact.close()
fqdes.close()
fxact.close()
fxdes.close()
